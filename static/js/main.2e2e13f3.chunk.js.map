{"version":3,"sources":["logo.svg","localization/toggleRTL.ts","components/core/ToggleSwitch/ToggleSwitch.tsx","components/RTLToggleSwitch/RTLToggleSwitch.tsx","theme/ThemeVariables.ts","theme/toggleDarkMode.ts","components/ThemeToggleSwitch/ThemeToggleSwitch.tsx","components/views/HomeViewComponent.tsx","components/views/SignupComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toggleRTL","setRTL","document","documentElement","setAttribute","ToggleSwitch","props","useState","initValue","currentValue","setValue","text","className","type","onChange","onToggle","checked","RTLToggleSwitch","localStorage","getItem","v","setItem","ThemeVariables","ThemeVariablesDark","toggleDarkMode","setDarkMode","themeObj","Object","keys","forEach","key","style","setProperty","ThemeToggleSwitch","HomeViewComponent","src","logo","alt","to","SignupComponent","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,2MCA5B,SAASC,EAAUC,GAChCC,SAASC,gBAAgBC,aAAa,MAAOH,EAAS,MAAQ,O,kBCQjD,SAASI,EAAaC,GAA4B,IAAD,EAC7BC,qBAAWD,EAAME,WADY,mBACvDC,EADuD,KACzCC,EADyC,KAQ9D,OACE,oCACGJ,EAAMK,KADT,IAEE,2BAAOC,UAAU,UACf,2BAAOC,KAAK,WAAWC,SAV7B,WAEER,EAAMS,UAAUN,GAChBC,GAAUD,IAOsCO,QAASP,IACrD,0BAAMG,UAAU,mBCdT,SAASK,IAKtB,OACE,6BACE,kBAAC,EAAD,CACEN,KAAM,MACNH,UAA+C,MAApCU,aAAaC,QAbd,UAcVJ,SATN,SAAmBK,GACjBF,aAAaG,QANC,SAMkBD,EAAI,IAAM,KAC1CpB,EAAUoB,OALdpB,EAA8C,MAApCkB,aAAaC,QAFL,WCJX,IAAMG,EAAiB,CAC1B,kBAAmB,UACnB,4BAA6B,QAC7B,mBAAoB,UACpB,oBAAqB,UACrB,6BAA8B,UAC9B,+BAAgC,QAChC,8BAA+B,QAGpBC,EAAqB,CAC9B,kBAAmB,UACnB,4BAA6B,UAC7B,mBAAoB,OACpB,oBAAqB,UACrB,6BAA8B,UAC9B,+BAAgC,QAChC,8BAA+B,QCftB,SAASC,EAAeC,GACrC,IAAMC,EAAmCD,EACrCF,EACAD,EACJK,OAAOC,KAAKF,GAAUG,SAAQ,SAACC,GAC7B5B,SAASC,gBAAgB4B,MAAMC,YAAYF,EAAKJ,EAASI,OCC9C,SAASG,IAKtB,OACE,6BACE,kBAAC,EAAD,CACEtB,KAAM,aACNH,UAAgD,MAArCU,aAAaC,QAbb,eAcXJ,SATN,SAAmBK,GACjBF,aAAaG,QANE,cAMkBD,EAAI,IAAM,KAC3CI,EAAeJ,OALnBI,EAAoD,MAArCN,aAAaC,QAFT,gB,qBCAJ,SAASe,IACtB,OACE,4BAAQtB,UAAU,cAChB,yBAAKuB,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,SACzC,mCACO,6CADP,wBAGA,kBAAC,IAAD,CAAMzB,UAAU,WAAW0B,GAAG,WAA9B,oBCTS,SAASC,IACtB,OAAO,yCC6BMC,MAvBf,WACE,OACE,oCACE,yBAAK5B,UAAU,OACb,6BACE,kBAACqB,EAAD,MACA,kBAAChB,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,KAChB,kBAACR,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,WACV,kBAACH,EAAD,YCXMI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e2e13f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function toggleRTL(setRTL: boolean) {\r\n  document.documentElement.setAttribute(\"dir\", setRTL ? \"rtl\" : \"ltr\");\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./ToggleSwitch.css\";\r\n\r\ninterface IToggleSwitchProps {\r\n  readonly onToggle: (val: boolean) => void;\r\n  readonly initValue?: boolean;\r\n  readonly text: string;\r\n}\r\n\r\nexport default function ToggleSwitch(props: IToggleSwitchProps) {\r\n  const [currentValue, setValue] = useState(!!props.initValue);\r\n  function _onToggle() {\r\n    // using value before changing state\r\n    props.onToggle(!currentValue);\r\n    setValue(!currentValue);\r\n  }\r\n  // change to custom element\r\n  return (\r\n    <>\r\n      {props.text}:\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\" onChange={_onToggle} checked={currentValue} />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport toggleRTL from \"../../localization/toggleRTL\";\r\nimport ToggleSwitch from \"../core/ToggleSwitch/ToggleSwitch\";\r\n\r\nconst strRtlKey = \"_isRTL\";\r\n// initializing theme RTL mode!\r\ntoggleRTL(localStorage.getItem(strRtlKey) === \"y\");\r\n\r\nexport default function RTLToggleSwitch() {\r\n  function _onToggle(v: boolean) {\r\n    localStorage.setItem(strRtlKey, v ? \"y\" : \"n\");\r\n    toggleRTL(v);\r\n  }\r\n  return (\r\n    <div>\r\n      <ToggleSwitch\r\n        text={\"RTL\"}\r\n        initValue={localStorage.getItem(strRtlKey) === \"y\"}\r\n        onToggle={_onToggle}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export const ThemeVariables = {\r\n    \"--main-bg-color\": \"#f8f8f8\",\r\n    \"--main-container-bg-color\": \"white\",\r\n    \"--main-txt-color\": \"#505050\",\r\n    \"--main-link-color\": \"#0878d4\",\r\n    \"--main-theme-primary-color\": \"#0878d4\",\r\n    \"--main-theme-secondary-color\": \"white\",\r\n    \"--main-theme-disabled-color\": \"gray\",\r\n  };\r\n  \r\n  export const ThemeVariablesDark = {\r\n      \"--main-bg-color\": \"#201f1f\",\r\n      \"--main-container-bg-color\": \"#2d2c2c\",\r\n      \"--main-txt-color\": \"#fff\",\r\n      \"--main-link-color\": \"#03f119\",\r\n      \"--main-theme-primary-color\": \"#03f119\",\r\n      \"--main-theme-secondary-color\": \"white\",\r\n      \"--main-theme-disabled-color\": \"gray\",\r\n  };\r\n  ","import { ThemeVariables, ThemeVariablesDark } from \"./ThemeVariables\";\r\n\r\nexport default function toggleDarkMode(setDarkMode: boolean) {\r\n  const themeObj: Record<string, string> = setDarkMode\r\n    ? ThemeVariablesDark\r\n    : ThemeVariables;\r\n  Object.keys(themeObj).forEach((key: string) => {\r\n    document.documentElement.style.setProperty(key, themeObj[key]);\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport ToggleSwitch from \"../core/ToggleSwitch/ToggleSwitch\";\r\nimport toggleDarkMode from \"../../theme/toggleDarkMode\";\r\n\r\nconst strModeKey = \"_isDarkMode\";\r\n// initializing theme variables!\r\ntoggleDarkMode(localStorage.getItem(strModeKey) === \"y\");\r\n\r\nexport default function ThemeToggleSwitch() {\r\n  function _onToggle(v: boolean) {\r\n    localStorage.setItem(strModeKey, v ? \"y\" : \"n\");\r\n    toggleDarkMode(v);\r\n  }\r\n  return (\r\n    <div>\r\n      <ToggleSwitch\r\n        text={\"Dark Theme\"}\r\n        initValue={localStorage.getItem(strModeKey) === \"y\"}\r\n        onToggle={_onToggle}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../../logo.svg\";\r\n\r\nexport default function HomeViewComponent() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <Link className=\"App-link\" to=\"/signup\"> Go to Sign Up!</Link>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function SignupComponent() {\r\n  return <span>Signup!</span>;\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport RTLToggleSwitch from \"./components/RTLToggleSwitch/RTLToggleSwitch\";\nimport ThemeToggleSwitch from \"./components/ThemeToggleSwitch/ThemeToggleSwitch\";\nimport HomeViewComponent from \"./components/views/HomeViewComponent\";\nimport SignupComponent from \"./components/views/SignupComponent\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <nav>\n          <ThemeToggleSwitch />\n          <RTLToggleSwitch />\n        </nav>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <HomeViewComponent />\n            </Route>\n            <Route path=\"/signup\">\n              <SignupComponent />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}